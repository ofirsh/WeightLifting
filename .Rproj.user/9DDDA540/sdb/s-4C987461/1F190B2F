{
    "contents" : "library(caret)\nset.seed(200801)\n\n# train <- read.table(\"data/pml-training.csv\",sep=\",\",header=TRUE,colClasses=c(\"numeric\",\"character\",\"numeric\",\"numeric\",\"Date\",\"logical\",rep(\"numeric\",154)))\ntrain.raw <- read.table(\"data/pml-training.csv\",sep=\",\",header=TRUE,colClasses=c(\"character\",\"character\",\"numeric\",\"numeric\",\"Date\",\"character\",rep(\"character\",154)))\n\n# test set don't contain the column named \"classe\" (but \"problem_id\"), all other points are the same \n# instead we will split the training set to create a train and test sets\nsubmission.raw <- read.table(\"data/pml-testing.csv\",sep=\",\",header=TRUE)\n\nnTrainNA <- apply( train.raw,2,function(x) sum(is.na(x) | x == \"\" ) )\n# column names where there are more than 15,000 missing values \nalmostEmptyColumns <- names(which(nTrainNA > 15000))\n\n# after removing the almost-empty columns and the first 6 columns, left with 54 columns (X, timestamp etc), including the \"classe\" (y)\ntrain.clean.factor <- train.raw[,!( names(train.raw) %in% almostEmptyColumns ) ][,-c(1:6)]\ntrain.clean <- data.frame( data.matrix(train.clean.factor[,-54]), train.clean.factor[,54])\nnames(train.clean)[54] <- \"class\"\n\n# remove from the submission the same columns as the one removed from the training, including the last column which is problem_id\nsubmission.factor <- submission.raw[,!( names(submission.raw) %in% almostEmptyColumns ) ][,-c(1:6)][,-54]\nsubmission <- data.frame( data.matrix( submission.factor ) )\n\ninTrain <- createDataPartition(y=train.clean$class,p=0.75,list=FALSE)\ntraining <- train.clean[inTrain,]\ntesting <- train.clean[-inTrain,]\n\nprComp <- prcomp(training[,-54])\n\nplot(cumsum(prComp$sdev^2/sum(prComp$sdev^2))) \n# from the plot it's clear that 10 PCA vectors will cover more tha 90% of the deviation\n\npreProc <- preProcess( training[,-54], method=\"pca\", pcaComp = 10)\n\ntrainingPC <- predict(preProc,training[,-54])\ntrainingPCy <- data.frame(trainingPC, training$class)\nnames(trainingPCy)[11] <- \"class\"\n\n# rpart ~30% accuracy\n\n# modelFitTree <- train(class ~ ., method = \"rpart\", data=trainingPCy)\nmodelFitTree <- train(class ~ ., method = \"rf\", data=trainingPCy)\n\n# plot(modelFitTree$finalModel, uniform = TRUE, main = \"Classification Tree\")\n# text(modelFitTree$model, use.n = TRUE, cex=.8)\n\ntestPC <- predict(preProc,testing[,-54])\npredictions <- predict(modelFitTree, testPC)\nconfusionMatrix(predictions,testing$class)\n\n# Overall Statistics\n# \n# Accuracy : 0.9617          \n# 95% CI : (0.9559, 0.9669)\n# No Information Rate : 0.2845          \n# P-Value [Acc > NIR] : < 2.2e-16       \n\n# now applying the model on the submission set\nsubmissionPC <- predict(preProc,submission)\nanswers <- predict(modelFitTree,submissionPC)\n\n\n# answers = rep(\"A\", 20)\n\npml_write_files = function(x){\n    n = length(x)\n    for(i in 1:n){\n        filename = paste0(\"problem_id_\",i,\".txt\")\n        write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n    }\n}\n",
    "created" : 1416127897266.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "885099708",
    "id" : "1F190B2F",
    "lastKnownWriteTime" : 1416501695,
    "path" : "~/Documents/Develop/Coursera/MachineLearning/WeightLiftingExercises/WeightLifting.R",
    "project_path" : "WeightLifting.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}